#!/bin/zsh
# infect - Single file user configuration file distribution system
# Written by Lowe Thiderman (lowe.thiderman@gmail.com)
# https://github.com/thiderman/infect
# Licensed under the BSD license.

# Preface {{{

SELF=$0:a

INFECT_HOST="http://infect.ninjaloot.se"
INFECT_DIR="$HOME/etc"
INFECT_WEB_DIR="$HOME/var/srv/infect"
INFECT_BACKUP="backup"
INFECT_RSYNC_EXCLUDE=".git* .hg* .svn* tmp/ $INFECT_BACKUP/"
INFECT_RC_FILE=$HOME/.infect
INFECT_REPO_FILE=.local

# }}}
# Install {{{

function infect_install() {
  typeset -A apps
  typeset -A dest
  typeset -A force

  local dir=${1:-$PWD}
  echo $dir:a > $INFECT_RC_FILE
  source $dir/*.src

  # Create symlinks for applications found on the system
  for app in ${(ko)apps}; do
    if [[ -x $commands[$app] ]] || [[ -n "$force[$app]" ]]; then
      infect_symlink ${(z)${apps[$app]}}
    fi
  done

  # If post_infect_install is a function, run it.
  res=$(LC_ALL=C builtin type -w post_infect_install 2>/dev/null)
  case $res in
    *': function')  post_infect_install;;
  esac
}

function infect_symlink() {
  local target_dir=$(<$INFECT_RC_FILE)

  while [[ -n "$1" ]]; do
    local target=$1
    local backup=$INFECT_DIR/$INFECT_BACKUP

    # If there is a destination in the dest array, use it
    local dst=$dest[$target]
    if [[ -z "$dst" ]]; then
      # If not, put directly in $HOME with a dot prefix
      dst="$HOME/.$target:t"
    fi

    src=$target_dir/$target

    if [[ -L $dst ]]; then
      unlink $dst
    elif [[ -f $dst ]] || [[ -d $dst ]]; then
      if [[ ! -d $backup ]]; then
        mkdir -p $backup
      fi
      mv $dst $backup
      print -P "Backed up original %B%F{10}${dst}%f%b"
    fi

    mkdir -p $dst:h &> /dev/null
    ln -s $src:a $dst:a
    print -P "%B%F{10}$1%f%b installed to %B%F{12}${dst}%b"

    shift
  done
}

# }}}
# Deploy {{{

function infect_deploy() {
  local src=${1:-${INFECT_DIR}}
  local dest=${2:-${INFECT_WEB_DIR}}
  local current="current.tgz"
  local file="$(date +"%Y.%m.%d").tgz"

  echo "Deploying to $dest..."
  if [[ ! -d $dest ]]; then
    # Create the directory or crash.
    if ! mkdir -p $dest; then
      echo "Error: Could not create destination directory. Aborting deploy."
      return 127
    fi
  fi

  cd $dest

  echo "Installing current infect script as index.html"
  cp $SELF ./index.html

  if [[ -f $file ]]; then
    echo "Removing already deployed $file"
    rm $file
  fi

  local exc=""
  for p in ${(z)INFECT_RSYNC_EXCLUDE}; do
    exc+="--exclude=$p "
  done

  echo "Rsyncing..."
  rsync $src ./stage -a ${(z)exc} || return 1

  # This here with getting a sane structure in tarballs...
  cd stage
  echo "Compressing..."
  tar czf $file * || return 1
  mv $file ..

  cd ..
  rm -r stage

  if [[ -L "$current" ]]; then
    echo "Unlinking old..."
    unlink $current
  fi

  echo "Linking new..."
  ln -s $file $current

  echo "Done! Deploy was made!"
}

# }}}
# Download / Update {{{

function infect_update() {
  local file="current.tgz"
  local target=$INFECT_DIR:t
  local repofile=$target/$INFECT_REPO_FILE

  if [[ -f $INFECT_RC_FILE ]]; then
    local dir=$(<$INFECT_RC_FILE)
    echo "Going to $dir..."
    cd $dir/..
  fi

  # Download and extract the tar file
  echo "Downloading..."
  curl --silent $INFECT_HOST/$file -O || return 1

  echo "Extracting..."
  tar xzf $file || return 1
  rm $file

  if [[ -n "$1" ]] || [[ -f $repofile ]]; then
    if [[ -f $repofile ]]; then
      local repo=$(<$repofile)
    else
      local repo=$1
      echo $repo > $repofile
    fi

    if [[ ! $repo =~ '/' ]]; then
      repo+="/conf-local"
    fi

    cd $target

    echo "Downloading $repo master zip file..."
    curl --silent https://nodeload.github.com/$repo/zip/master -O || return 1

    echo "Unzipping..."
    unzip -qq master || return 1

    echo "Mutating..."
    rsync -r ./conf-local-master/* . || return 1
    rm -r master conf-local-master

    cd ..
  fi

  # XXX: Fix this shit
  # If using old structure, sync to it.
  if [[ -d "./config" ]]; then
    echo "Syncing..."
    rsync -r ./etc/* ./config
    rm -r etc
  fi

  infect_install $target || return 1
  echo "Infection complete."
}

# }}}
# Uninstall {{{

function infect_uninstall() {
  typeset -A apps
  typeset -A dest
  typeset -A force

  local dir=${1:-$PWD}
  source $dir/*.src

  for app in ${(ko)apps}; do
    infect_unlink ${(z)${apps[$app]}}
  done
}

function infect_unlink() {
  while [[ -n "$1" ]]; do
    local target=$1
    local dst=$dest[$target]

    if [[ -n "$dst" ]]; then
      _unlink $dst || return 1
      # Non-home target. Make sure to remove empty parent directories!
      dst=$dst:h
      while rmdir $dst &> /dev/null; do
        print -P "%B%F{12}$dst%f%b removed"
        dst=$dst:h
      done
    else
      _unlink "$HOME/.$target:t" || return 1
    fi
    shift
  done
}

function _unlink() {
  if [[ -L $1 ]]; then
    unlink $1 || return 1
    print -P "%B%F{11}$1%f%b unlinked"
  fi
}

# }}}

# Runtime case selection {{{

arg=$1
if [[ -n "$1" ]]; then
  shift
fi

case $arg in
  install)
    infect_install $*;;

  deploy)
    infect_deploy $*;;

  uninstall)
    infect_uninstall $*;;

  *)
    infect_update $arg;;
esac

# }}}

# vim: et sts=2 sw=2 fdm=marker fmr={{{,}}}
